from cmsisdsp.cg.scheduler import *
import math
import argparse
from colorama import Fore, Back, Style

# Audio files to use in AVH Python script.
# -stereo option is used to select the stereo file
AUDIOFILES = """# Automatically generated by graph.py. Don't edit.
INPUT_FILENAME = 'sounds/%s_%dkHz.wav'
OUTPUT_FILENAME = 'output_%dkHz.wav'"""

# Graph parameters generated by the graph.py
# so that the C code and Python are coherent
# (sampling rate, buffer sizes ...)
GRAPHPARAMS="""#ifndef _GRAPH_PARAMS_H_
#define _GRAPH_PARAMS_H_

/*

Automatically generated by graph.py.
Don't edit.

*/

/* Size of internal packet as defined in graph.py*/
#define AUDIOBUF_INPUT %d
#define AUDIOBUF_OUTPUT %d
#define AUDIOBUF_SPEEX %d

#define INPUT_SAMPLING_FREQ %d
#define OUTPUT_SAMPLING_FREQ %d
#define SPEEX_SAMPLING_FREQ %d

#endif
"""

# Value to use for sampling rate in the file name
# It is the suffix applied to the file name depending
# on the sampling frequency.
# Currently there are only 48 kHz examples
# in this project
def fileSampling(x):
    if x == 48000:
        return(48)
    if x == 44100:
        return(441)
    if x == 16000:
        return(16)
    if x == 8000:
        return(8)
    return(48)

# Some new nodes used in the project
# and not available as part of the
# CMSIS-DSP set of default nodes
class Mixer2(GenericNode):
    def __init__(self,name,theType,inLength):
        GenericNode.__init__(self,name)
        self.addInput("ia",theType,inLength)
        self.addInput("ib",theType,inLength)
        self.addOutput("o",theType,inLength)

    @property
    def typeName(self):
        return "Mixer2"

class Mixer3(GenericNode):
    def __init__(self,name,theType,inLength):
        GenericNode.__init__(self,name)
        self.addInput("ia",theType,inLength)
        self.addInput("ib",theType,inLength)
        self.addInput("ic",theType,inLength)
        self.addOutput("o",theType,inLength)

    @property
    def typeName(self):
        return "Mixer3"

class SeparateStereoToMono(GenericNode):
    def __init__(self,name,theType,inLength):
        GenericNode.__init__(self,name)
        self.addInput("ileft",theType,inLength)
        self.addInput("iright",theType,inLength)
        self.addOutput("o",theType,inLength)

    @property
    def typeName(self):
        return "SeparateStereoToMono"

# Example processing node
# A compute graph can have several processing
# nodes
class ProcessingNode(GenericNode):
    def __init__(self,name,theType,inLength):
        GenericNode.__init__(self,name)
        self.addInput("i",theType,inLength)
        self.addOutput("o",theType,inLength)

    @property
    def typeName(self):
        return "ProcessingNode"

# Used for HOST only
class WavSource(GenericSource):
    def __init__(self,name,theType,outLength):
        GenericSource.__init__(self,name)
        self.addOutput("oleft",theType,outLength)
        self.addOutput("oright",theType,outLength)

    @property
    def typeName(self):
        return "WavSource"

# Used for HOST only
class WavSink(GenericSink):
    def __init__(self,name,theType,inLength):
        GenericSink.__init__(self,name)
        self.addInput("ileft",theType,inLength)
        self.addInput("iright",theType,inLength)

    @property
    def typeName(self):
        return "WavSink"

# Stereo source
class Source(GenericSource):
    def __init__(self,name,theType,outLength):
        GenericSource.__init__(self,name)
        self.addOutput("oleft",theType,outLength)
        self.addOutput("oright",theType,outLength)


    @property
    def typeName(self):
        return "Source"

# Stereo sink
class Sink(GenericSink):
    def __init__(self,name,theType,inLength):
        GenericSink.__init__(self,name)
        self.addInput("ileft",theType,inLength)
        self.addInput("iright",theType,inLength)


    @property
    def typeName(self):
        return "Sink"



# Some standard configurations
# packaged in the object GraphConfig

# All the examples are Q15
sampleType=CType(SINT16)

class GraphConfig():
    def __init__(self,IO_FREQ,SPEEX_FREQ):
       # Size of audio packet used by DMA
       # Will give 768 samples at 48000 kHz
       self.AUDIOPACKET_DURATION = 16.66 #  ms
       self.AUDIOPACKET_INPUT_NB_SAMPLES = int(round(self.AUDIOPACKET_DURATION/1000*IO_FREQ))
       self.AUDIOPACKET_OUTPUT_NB_SAMPLES = int(round(self.AUDIOPACKET_DURATION/1000*IO_FREQ))
       self.AUDIOPACKET_SPEEX_NB_SAMPLES =  int(round(self.AUDIOPACKET_DURATION/1000*SPEEX_FREQ))

       # Display the number of samples in an 
       # input or output packet.
       # In this example project, it should be
       # equal
       #print(Fore.GREEN + "Input  audio packet length" + Style.RESET_ALL + " = %d" % self.AUDIOPACKET_INPUT_NB_SAMPLES)
       #print(Fore.GREEN + "Output audio packet length" + Style.RESET_ALL + " = %d" % self.AUDIOPACKET_OUTPUT_NB_SAMPLES)
       #print(Fore.GREEN + "Speex audio packet length" + Style.RESET_ALL + " = %d" % self.AUDIOPACKET_SPEEX_NB_SAMPLES)

       #print("")
       
      